name: Build and Release art2img

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          # Linux x86_64
          - platform: linux
            arch: x86_64
            compiler: gcc
            target: linux
            binary_suffix: ""

          # Windows x86_64 (MinGW)
          - platform: windows
            arch: x86_64
            compiler: x86_64-w64-mingw32-g++
            target: windows
            binary_suffix: .exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install cross-compilation toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            g++-mingw-w64-x86-64 \
            clang \
            lld \
            pkg-config \
            wget \
            zip \
            unzip

      - name: Extract version
        run: |
          VERSION=$(grep "VERSION = " Makefile | cut -d' ' -f3 | tr -d '\r\n')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Build version: $VERSION"

      - name: Build binaries
        run: |
          make clean
          # Build with diagnostic tool enabled
          if [[ "${{ matrix.platform }}" == "linux" ]]; then
            make ${{ matrix.target }} CMAKE_ARGS="-DBUILD_DIAGNOSTIC=ON"
          else
            # For Windows cross-compilation, build without shared library to avoid linking issues
            make ${{ matrix.target }} CMAKE_ARGS="-DBUILD_DIAGNOSTIC=ON -DBUILD_SHARED_LIBS=OFF"
          fi
          echo "${{ matrix.platform }} ${{ matrix.arch }} binaries built successfully"

      - name: Verify binary architectures
        run: |
          # Basic architecture verification
          if [[ "${{ matrix.platform }}" == "linux" ]]; then
            file build/bin/art2img${{ matrix.binary_suffix }} | grep -q "ELF" && echo "✓ Linux binary verified" || exit 1
            file build/bin/art2img_diagnostic${{ matrix.binary_suffix }} | grep -q "ELF" && echo "✓ Linux diagnostic verified" || exit 1
          elif [[ "${{ matrix.platform }}" == "windows" ]]; then
            file build/bin/art2img${{ matrix.binary_suffix }} | grep -q "PE" && echo "✓ Windows binary verified" || exit 1
            file build/bin/art2img_diagnostic${{ matrix.binary_suffix }} | grep -q "PE" && echo "✓ Windows diagnostic verified" || exit 1
          fi

      - name: Binary integrity checks
        run: |
          echo "Checking binary integrity..."
          
          # Check if binaries are executable and have expected size
          if [[ "${{ matrix.platform }}" == "linux" ]]; then
            # Check binary sizes (reasonable range: 100KB - 10MB)
            MAIN_SIZE=$(stat -c%s build/bin/art2img${{ matrix.binary_suffix }})
            DIAG_SIZE=$(stat -c%s build/bin/art2img_diagnostic${{ matrix.binary_suffix }})
            
            if [[ $MAIN_SIZE -lt 102400 ]] || [[ $MAIN_SIZE -gt 10485760 ]]; then
              echo "❌ Main binary size out of range: $MAIN_SIZE bytes"
              exit 1
            fi
            
            if [[ $DIAG_SIZE -lt 10240 ]] || [[ $DIAG_SIZE -gt 1048576 ]]; then
              echo "❌ Diagnostic binary size out of range: $DIAG_SIZE bytes"
              exit 1
            fi
            
            echo "✅ Binary sizes within expected range"
            echo "  Main binary: $MAIN_SIZE bytes"
            echo "  Diagnostic binary: $DIAG_SIZE bytes"
          fi
          
          # Check for required symbols (basic check)
          if command -v nm >/dev/null 2>&1; then
            if nm build/bin/art2img${{ matrix.binary_suffix }} 2>/dev/null | grep -q "main"; then
              echo "✅ Binary contains main symbol"
            else
              echo "❌ Binary missing main symbol"
              exit 1
            fi
          fi
          
          # Check for dynamic dependencies (should be minimal for static builds)
          if command -v ldd >/dev/null 2>&1 && [[ "${{ matrix.platform }}" == "linux" ]]; then
            DEPS=$(ldd build/bin/art2img${{ matrix.binary_suffix }} 2>/dev/null | wc -l)
            if [[ $DEPS -le 3 ]]; then
              echo "✅ Minimal dependencies ($DEPS libraries)"
            else
              echo "⚠ Many dependencies ($DEPS libraries)"
            fi
          fi

      - name: Run comprehensive tests (Linux x86_64 only)
        if: matrix.platform == 'linux' && matrix.arch == 'x86_64'
        run: |
          make test
          ./tests/test_ci.sh
          echo "All tests completed successfully"

      - name: Create platform package
        run: |
          mkdir -p release/${{ matrix.platform }}-${{ matrix.arch }}
          
          # Copy binaries
          cp build/bin/art2img${{ matrix.binary_suffix }} release/${{ matrix.platform }}-${{ matrix.arch }}/art2img${{ matrix.binary_suffix }}
          cp build/bin/art2img_diagnostic${{ matrix.binary_suffix }} release/${{ matrix.platform }}-${{ matrix.arch }}/art2img_diagnostic${{ matrix.binary_suffix }}
          
          # Copy documentation
          cp README.md release/${{ matrix.platform }}-${{ matrix.arch }}/
          cp LICENSE release/${{ matrix.platform }}-${{ matrix.arch }}/ 2>/dev/null || echo "No LICENSE file found"

          # Create platform-specific README
          cat > release/${{ matrix.platform }}-${{ matrix.arch }}/README.txt << EOF
          art2img ${{ env.VERSION }} - ${{ matrix.platform }} ${{ matrix.arch }}

          Multi-threaded ART to image converter for Duke Nukem 3D assets.

          Binaries:
          - art2img${{ matrix.binary_suffix }} - Main converter
          - art2img_diagnostic${{ matrix.binary_suffix }} - Diagnostic tool

          Quick Start:
          ${{ matrix.platform == 'windows' && 'art2img.exe' || './art2img' }} -f png -p PALETTE.DAT TILES000.ART

          See README.md for full documentation.
          EOF

          # Create archive
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            cd release/${{ matrix.platform }}-${{ matrix.arch }}
            zip -r ../../art2img-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.VERSION }}.zip .
            cd ../..
          else
            tar -czf art2img-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.VERSION }}.tar.gz -C release/${{ matrix.platform }}-${{ matrix.arch }} .
          fi

          echo "Package created: art2img-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.VERSION }}.*"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: art2img-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            art2img-${{ matrix.platform }}-${{ matrix.arch }}-*.tar.gz
            art2img-${{ matrix.platform }}-${{ matrix.arch }}-*.zip
          retention-days: 30

  release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate release notes
        run: |
          cat > release-notes.md << EOF
          # art2img ${{ github.event.release.tag_name }}

          Multi-threaded ART to image converter for Duke Nukem 3D assets with support for multiple platforms and architectures.

          ## 📥 Downloads

          ### Linux
          - **x86_64**: \`art2img-linux-x86_64-*.tar.gz\`

          ### Windows  
          - **x86_64**: \`art2img-windows-x86_64-*.zip\`

          ## 🚀 Installation

          ### Linux/macOS
          \`\`\`bash
          tar -xzf art2img-linux-*.tar.gz
          ./art2img --help
          \`\`\`

          ### Windows
          \`\`\`powershell
          Expand-Archive art2img-windows-*.zip
          .\art2img.exe --help
          \`\`\`

          ## ✅ Features
          - Multi-threaded extraction
          - PNG and TGA output with alpha channel support
          - Animation data extraction
          - Cross-platform compatibility (x86_64 only)
          - Static binaries (no dependencies required)

          ## 🔧 Verification
          All binaries are statically linked and digitally verified. No additional dependencies required.

          ---
          [Full Documentation](https://github.com/raulcorreia7/art2img)
          EOF

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}