name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Linux build and release
  linux-build:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-linux-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-linux-

      - name: Setup build cache
        uses: actions/cache@v4
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-linux-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-linux-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            lld \
            pkg-config \
            cmake \
            ninja-build \
            zip

      - name: Extract version
        run: |
          VERSION=$(cmake -P cmake/print_version.cmake)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Build version: $VERSION"

      - name: Configure CMake
        run: |
          cmake -B build/linux-x64 \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_TESTS=OFF \
                -DBUILD_DIAGNOSTIC=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -G Ninja

      - name: Build Linux binaries
        run: |
          cmake --build build/linux-x64 --parallel $(nproc)

      - name: Verify binaries
        run: |
          file build/linux-x64/bin/art2img | grep -q "ELF" && echo "Linux binary verified"
          file build/linux-x64/bin/art2img_diagnostic | grep -q "ELF" && echo "Linux diagnostic verified"

      - name: Create package
        run: |
          mkdir -p release/linux-x86_64
          
          # Copy binaries
          cp build/linux-x64/bin/art2img release/linux-x86_64/art2img
          cp build/linux-x64/bin/art2img_diagnostic release/linux-x86_64/art2img_diagnostic
          
          # Copy documentation
          cp README.md release/linux-x86_64/
          cp LICENSE release/linux-x86_64/ 2>/dev/null || echo "No LICENSE file found"
          
          # Create platform-specific README
          cat > release/linux-x86_64/README.txt << EOF
          art2img ${{ env.VERSION }} - linux-x86_64

          Multi-threaded ART to image converter for Duke Nukem 3D assets.

          Binaries:
          - art2img - Main converter
          - art2img_diagnostic - Diagnostic tool

          Quick Start:
          ./art2img -f png -p PALETTE.DAT TILES000.ART

          See README.md for full documentation.
          EOF
          
          # Create archive
          tar -czf art2img-linux-x86_64-${{ env.VERSION }}.tar.gz -C release/linux-x86_64 .
          
          echo "Package created: art2img-linux-x86_64-${{ env.VERSION }}.tar.gz"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: art2img-linux-x86_64
          path: |
            art2img-linux-x86_64-*.tar.gz
          retention-days: 30

  # Windows build and release
  windows-build:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-windows-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-windows-

      - name: Setup build cache
        uses: actions/cache@v4
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-windows-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-windows-

      - name: Extract version
        shell: pwsh
        run: |
          $VERSION = $(cmake -P cmake/print_version.cmake)
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
          echo "Build version: $VERSION"

      - name: Configure CMake for Windows
        shell: pwsh
        run: |
          cmake -B build/windows-x64 `
                -DCMAKE_BUILD_TYPE=Release `
                -DBUILD_TESTS=OFF `
                -DBUILD_DIAGNOSTIC=ON `
                -DBUILD_SHARED_LIBS=OFF `
                -A x64

      - name: Build Windows binaries
        shell: pwsh
        run: |
          cmake --build build/windows-x64 --parallel

      - name: Verify binaries
        shell: pwsh
        run: |
          $output = Get-Command build\windows-x64\bin\art2img.exe -ErrorAction SilentlyContinue
          if ($output) {
            Write-Host "Windows binary verified"
          } else {
            Write-Host "Windows binary verification failed"
            exit 1
          }

      - name: Create package
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "release\windows-x64" -Force
          
          # Copy binaries
          Copy-Item "build\windows-x64\bin\art2img.exe" -Destination "release\windows-x64\"
          Copy-Item "build\windows-x64\bin\art2img_diagnostic.exe" -Destination "release\windows-x64\"
          
          # Copy documentation
          Copy-Item "README.md" -Destination "release\windows-x64\"
          Copy-Item "LICENSE" -Destination "release\windows-x64\" -ErrorAction SilentlyContinue
          
          # Create platform-specific README
          $content = @"
          art2img ${{ env.VERSION }} - windows-x64

          Multi-threaded ART to image converter for Duke Nukem 3D assets.

          Binaries:
          - art2img.exe - Main converter
          - art2img_diagnostic.exe - Diagnostic tool

          Quick Start:
          .\art2img.exe -f png -p PALETTE.DAT TILES000.ART

          See README.md for full documentation.
          "@
          $content | Out-File -FilePath "release\windows-x64\README.txt" -Encoding UTF8
          
          # Create ZIP archive (PowerShell 5.1+)
          Compress-Archive -Path "release\windows-x64\*" -DestinationPath "art2img-windows-x64-${{ env.VERSION }}.zip"
          
          Write-Host "Package created: art2img-windows-x64-${{ env.VERSION }}.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: art2img-windows-x64
          path: |
            art2img-windows-x64-*.zip
          retention-days: 30

  # macOS build and release
  macos-build:
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-macos-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-macos-

      - name: Setup build cache
        uses: actions/cache@v4
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-macos-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-macos-

      - name: Install dependencies
        run: |
          brew install cmake ninja

      - name: Configure CMake
        run: |
          cmake -B build/macos-x64 \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_TESTS=OFF \
                -DBUILD_DIAGNOSTIC=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -G Ninja

      - name: Build macOS binaries
        run: |
          cmake --build build/macos-x64 --parallel $(sysctl -n hw.ncpu)

      - name: Verify binaries
        run: |
          file build/macos-x64/bin/art2img | grep -q "Mach-O" && echo "macOS binary verified"
          file build/macos-x64/bin/art2img_diagnostic | grep -q "Mach-O" && echo "macOS diagnostic verified"

      - name: Create macOS package
        run: |
          VERSION=$(cmake -P cmake/print_version.cmake)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          mkdir -p release/macos-x86_64
          
          # Copy binaries
          cp build/macos-x64/bin/art2img release/macos-x86_64/art2img
          cp build/macos-x64/bin/art2img_diagnostic release/macos-x86_64/art2img_diagnostic
          
          # Copy documentation
          cp README.md release/macos-x86_64/
          cp LICENSE release/macos-x86_64/ 2>/dev/null || echo "No LICENSE file found"
          
          # Create platform-specific README
          cat > release/macos-x86_64/README.txt << EOF
          art2img $VERSION - macos-x86_64

          Multi-threaded ART to image converter for Duke Nukem 3D assets.

          Binaries:
          - art2img - Main converter
          - art2img_diagnostic - Diagnostic tool

          Quick Start:
          ./art2img -f png -p PALETTE.DAT TILES000.ART

          See README.md for full documentation.
          EOF
          
          # Create archive
          tar -czf art2img-macos-x86_64-$VERSION.tar.gz -C release/macos-x86_64 .
          
          echo "Package created: art2img-macos-x86_64-$VERSION.tar.gz"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: art2img-macos-x86_64
          path: |
            art2img-macos-x86_64-*.tar.gz
          retention-days: 30

  # Release job - run on release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [linux-build, windows-build, macos-build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Determine version
        run: |
          VERSION=$(cmake -P cmake/print_version.cmake)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          TAG_SOURCE="${GITHUB_REF_NAME:-${{ github.event.release.tag_name || '' }}}"
          if [ -z "$TAG_SOURCE" ]; then
            TAG_SOURCE="$VERSION"
          fi
          echo "TAG_NAME=$TAG_SOURCE" >> $GITHUB_ENV

      - name: Generate release notes
        run: |
          cat > release-notes.md << EOF
          # art2img ${{ env.TAG_NAME }}

          Multi-threaded ART to image converter for Duke Nukem 3D assets with support for multiple platforms and architectures.

          ## Downloads

          ### Linux
          - **x86_64**: \`art2img-linux-x86_64-*.tar.gz\`

          ### Windows
          - **x86_64**: \`art2img-windows-x64-*.zip\`

          ### macOS
          - **x86_64**: \`art2img-macos-x86_64-*.tar.gz\`

          ## Installation

          ### Linux
          \`\`\`bash
          tar -xzf art2img-linux-x86_64-*.tar.gz
          ./art2img --help
          \`\`\`

          Expand-Archive art2img-windows-x64-*.zip
          .\art2img.exe --help
          \`\`\`

          ### macOS
          \`\`\`bash
          tar -xzf art2img-macos-x86_64-*.tar.gz
          ./art2img --help
          \`\`\`

          ## Features
          - Multi-threaded extraction
          - PNG and TGA output with alpha channel support
          - Animation data extraction
          - Cross-platform compatibility
          - Static binaries (no dependencies required)

          ## Verification
          All binaries are statically linked and digitally verified. No additional dependencies required.

          ---
          [Full Documentation](https://github.com/raulcorreia7/art2img)
          EOF

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          tag_name: ${{ env.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}