name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_path: build/cli/art2img_cli
            asset_name: art2img-linux-x64
            archive_name: art2img-${{ github.ref_name }}-linux-x64
            archive_ext: .tar.gz
          - os: macos-latest
            artifact_path: build/cli/art2img_cli
            asset_name: art2img-macos-x64
            archive_name: art2img-${{ github.ref_name }}-macos-x64
            archive_ext: .tar.gz
          - os: windows-latest
            artifact_path: build/cli/Release/art2img_cli.exe
            asset_name: art2img-windows-x64.exe
            archive_name: art2img-${{ github.ref_name }}-windows-x64
            archive_ext: .zip
            arch: x64
          - os: windows-latest
            artifact_path: build/cli/Release/art2img_cli.exe
            asset_name: art2img-windows-x86.exe
            archive_name: art2img-${{ github.ref_name }}-windows-x86
            archive_ext: .zip
            arch: Win32
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
        
    - name: Cache CPM dependencies
      uses: actions/cache@v4
      with:
        path: .cache
        key: ${{ runner.os }}-cpm-${{ hashFiles('cmake/CPM.cmake', '**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cpm-
          
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON ${{ matrix.arch && format('-A {0}', matrix.arch) || '-A x64' }}
        
    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      run: |
        if [ "${{ runner.os }}" = "macOS" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON
        else
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON
        fi
        
    - name: Build (Windows)
      if: runner.os == 'Windows'
      run: |
        cmake --build build --config Release --parallel
        
    - name: Build (Unix)
      if: runner.os != 'Windows'
      run: |
        if [ "${{ runner.os }}" = "macOS" ]; then
          cmake --build build --config Release
        else
          cmake --build build --config Release --parallel
        fi
        
    - name: Build Verification
      shell: bash
      run: |
        # Use CMake to find the actual test executable location
        cd build
        if [ "${{ runner.os }}" = "Windows" ]; then
          TEST_PATH=$(find . -name "art2img_tests.exe" -type f | head -1)
          if [ -z "$TEST_PATH" ]; then
            echo "No art2img_tests.exe found in build directory"
            find . -name "*.exe" -type f || echo "No executables found"
            exit 1
          fi
          echo "Test executable found at: $TEST_PATH"
        else
          TEST_PATH=$(find . -name "art2img_tests" -type f | head -1)
          if [ -z "$TEST_PATH" ]; then
            echo "No art2img_tests found in build directory"
            find . -name "art2img*" -type f -executable || echo "No executables found"
            exit 1
          fi
          echo "Test executable found at: $TEST_PATH"
        fi
        
    - name: Test Release Build
      shell: bash
      run: |
        cd build
        if [ "${{ runner.os }}" = "Windows" ]; then
          ctest --output-on-failure --parallel 1 --timeout 300 -C Release
        elif [ "${{ runner.os }}" = "macOS" ]; then
          ctest --output-on-failure --parallel 1 --timeout 300 -C Release
        else
          ctest --output-on-failure --parallel 1 --timeout 300 -C Release
        fi
        
    - name: Create Archive Directory
      shell: bash
      run: |
        mkdir -p archive_temp
        cp "${{ matrix.artifact_path }}" "archive_temp/"
        cp README.md "archive_temp/" 2>/dev/null || echo "No README.md found"
        cp LICENSE "archive_temp/" 2>/dev/null || echo "No LICENSE found"
        cp USAGE.md "archive_temp/" 2>/dev/null || echo "No USAGE.md found"
        
    - name: Create Archive (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cd archive_temp
        tar -czf "../${{ matrix.archive_name }}${{ matrix.archive_ext }}" .
        cd ..
        echo "Created archive: ${{ matrix.archive_name }}${{ matrix.archive_ext }}"
        
    - name: Create Archive (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        cd archive_temp
        7z a "../${{ matrix.archive_name }}${{ matrix.archive_ext }}" .
        cd ..
        echo "Created archive: ${{ matrix.archive_name }}${{ matrix.archive_ext }}"
        
    - name: Generate Checksum
      shell: bash
      run: |
        # Generate checksum for the binary
        if [ "${{ runner.os }}" = "Windows" ]; then
          certutil -hashfile "${{ matrix.artifact_path }}" SHA256 | grep -E '^[a-fA-F0-9]{64}$' > "${{ matrix.asset_name }}.sha256"
        else
          sha256sum "${{ matrix.artifact_path }}" | cut -d' ' -f1 > "${{ matrix.asset_name }}.sha256"
        fi
        
        # Generate checksum for the archive
        if [ "${{ runner.os }}" = "Windows" ]; then
          certutil -hashfile "${{ matrix.archive_name }}${{ matrix.archive_ext }}" SHA256 | grep -E '^[a-fA-F0-9]{64}$' > "${{ matrix.archive_name }}${{ matrix.archive_ext }}.sha256"
        else
          sha256sum "${{ matrix.archive_name }}${{ matrix.archive_ext }}" | cut -d' ' -f1 > "${{ matrix.archive_name }}${{ matrix.archive_ext }}.sha256"
        fi
        
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ matrix.archive_name }}${{ matrix.archive_ext }}
          ${{ matrix.archive_name }}${{ matrix.archive_ext }}.sha256

  source:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install zip
      run: |
        sudo apt-get update
        sudo apt-get install -y zip
        
    - name: Create Source Archives
      run: |
        # Create a clean source directory without hidden files
        mkdir -p source_dist/art2img
        
        # Copy only the essential files needed for distribution
        cp -r cli/ source_dist/art2img/
        cp -r cmake/ source_dist/art2img/
        cp -r docs/ source_dist/art2img/
        cp -r include/ source_dist/art2img/
        cp -r src/ source_dist/art2img/
        cp -r tests/ source_dist/art2img/
        cp CMakeLists.txt source_dist/art2img/
        cp LICENSE source_dist/art2img/
        cp README.md source_dist/art2img/
        cp USAGE.md source_dist/art2img/
        cp Makefile source_dist/art2img/
        
        # Create source archives
        cd source_dist
        tar -czf "../art2img-${{ github.ref_name }}.tar.gz" art2img
        zip -r "../art2img-${{ github.ref_name }}.zip" art2img
        cd ..
        
        # Generate checksums for source archives
        sha256sum "art2img-${{ github.ref_name }}.tar.gz" | cut -d' ' -f1 > "art2img-${{ github.ref_name }}.tar.gz.sha256"
        sha256sum "art2img-${{ github.ref_name }}.zip" | cut -d' ' -f1 > "art2img-${{ github.ref_name }}.zip.sha256"
        
    - name: Upload Source Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          art2img-${{ github.ref_name }}.tar.gz
          art2img-${{ github.ref_name }}.zip
          art2img-${{ github.ref_name }}.tar.gz.sha256
          art2img-${{ github.ref_name }}.zip.sha256
