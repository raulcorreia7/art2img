name: Build and Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  # Build job - run on release
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux-x86_64, windows-x86, windows-x86_64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install cross-compilation toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            g++-mingw-w64-i686 \
            g++-mingw-w64-x86-64 \
            clang \
            lld \
            pkg-config \
            zip

      - name: Extract version
        run: |
          VERSION=$(grep "VERSION = " Makefile | cut -d' ' -f3 | tr -d '\r\n')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Build version: $VERSION"

      - name: Build binaries
        run: |
          if [[ "${{ matrix.target }}" == "linux-x86_64" ]]; then
            make linux-release
            BINARY_DIR="build/linux-release"
            BINARY_SUFFIX=""
            PACKAGE_EXT="tar.gz"
          elif [[ "${{ matrix.target }}" == "windows-x86" ]]; then
            make windows-x86-release
            BINARY_DIR="build/windows-x86-release"
            BINARY_SUFFIX=".exe"
            PACKAGE_EXT="zip"
          elif [[ "${{ matrix.target }}" == "windows-x86_64" ]]; then
            make windows-release
            BINARY_DIR="build/windows-release"
            BINARY_SUFFIX=".exe"
            PACKAGE_EXT="zip"
          fi
          
          echo "BINARY_DIR=$BINARY_DIR" >> $GITHUB_ENV
          echo "BINARY_SUFFIX=$BINARY_SUFFIX" >> $GITHUB_ENV
          echo "PACKAGE_EXT=$PACKAGE_EXT" >> $GITHUB_ENV

      - name: Verify binaries
        run: |
          if [[ "${{ matrix.target }}" == "linux-x86_64" ]]; then
            file ${{ env.BINARY_DIR }}/bin/art2img | grep -q "ELF" && echo "âœ“ Linux binary verified"
            file ${{ env.BINARY_DIR }}/bin/art2img_diagnostic | grep -q "ELF" && echo "âœ“ Linux diagnostic verified"
          else
            file ${{ env.BINARY_DIR }}/bin/art2img.exe | grep -q "PE" && echo "âœ“ Windows binary verified"
            file ${{ env.BINARY_DIR }}/bin/art2img_diagnostic.exe | grep -q "PE" && echo "âœ“ Windows diagnostic verified"
          fi

      - name: Create package
        run: |
          mkdir -p release/${{ matrix.target }}
          
          # Copy binaries
          cp ${{ env.BINARY_DIR }}/bin/art2img${{ env.BINARY_SUFFIX }} release/${{ matrix.target }}/art2img${{ env.BINARY_SUFFIX }}
          cp ${{ env.BINARY_DIR }}/bin/art2img_diagnostic${{ env.BINARY_SUFFIX }} release/${{ matrix.target }}/art2img_diagnostic${{ env.BINARY_SUFFIX }}
          
          # Copy documentation
          cp README.md release/${{ matrix.target }}/
          cp LICENSE release/${{ matrix.target }}/ 2>/dev/null || echo "No LICENSE file found"
          
          # Create platform-specific README
          cat > release/${{ matrix.target }}/README.txt << EOF
          art2img ${{ env.VERSION }} - ${{ matrix.target }}
          
          Multi-threaded ART to image converter for Duke Nukem 3D assets.
          
          Binaries:
          - art2img${{ env.BINARY_SUFFIX }} - Main converter
          - art2img_diagnostic${{ env.BINARY_SUFFIX }} - Diagnostic tool
          
          Quick Start:
          ${{ matrix.target == 'linux-x86_64' && './art2img' || 'art2img.exe' }} -f png -p PALETTE.DAT TILES000.ART
          
          See README.md for full documentation.
          EOF
          
          # Create archive
          if [[ "${{ matrix.target }}" == "linux-x86_64" ]]; then
            tar -czf art2img-${{ matrix.target }}-${{ env.VERSION }}.tar.gz -C release/${{ matrix.target }} .
          else
            cd release/${{ matrix.target }}
            zip -r ../../art2img-${{ matrix.target }}-${{ env.VERSION }}.zip .
            cd ../..
          fi
          
          echo "Package created: art2img-${{ matrix.target }}-${{ env.VERSION }}.${{ env.PACKAGE_EXT }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: art2img-${{ matrix.target }}
          path: |
            art2img-${{ matrix.target }}-*.${{ env.PACKAGE_EXT }}
          retention-days: 30

  # Release job - run on release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate release notes
        run: |
          cat > release-notes.md << EOF
          # art2img ${{ github.event.release.tag_name }}
          
          Multi-threaded ART to image converter for Duke Nukem 3D assets with support for multiple platforms and architectures.
          
          ## ðŸ“¥ Downloads
          
          ### Linux
          - **x86_64**: \`art2img-linux-x86_64-*.tar.gz\`
          
          ### Windows  
          - **x86**: \`art2img-windows-x86-*.zip\`
          - **x86_64**: \`art2img-windows-x86_64-*.zip\`
          
          ## ðŸš€ Installation
          
          ### Linux
          \`\`\`bash
          tar -xzf art2img-linux-x86_64-*.tar.gz
          ./art2img --help
          \`\`\`
          
          ### Windows
          \`\`\`powershell
          Expand-Archive art2img-windows-x86_64-*.zip
          .\art2img.exe --help
          \`\`\`
          
          ## âœ… Features
          - Multi-threaded extraction
          - PNG and TGA output with alpha channel support
          - Animation data extraction
          - Cross-platform compatibility
          - Static binaries (no dependencies required)
          
          ## ðŸ”§ Verification
          All binaries are statically linked and digitally verified. No additional dependencies required.
          
          ---
          [Full Documentation](https://github.com/raulcorreia7/art2img)
          EOF

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}