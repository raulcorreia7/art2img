name: Build and Release

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare metadata
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          VERSION=$(cmake -P cmake/print_version.cmake)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Build version: $VERSION"

  package-linux:
    name: Package Linux build
    runs-on: ubuntu-latest
    needs: prepare
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache CPM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/CPM
          key: cpm-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-

      - name: Configure CPM cache directory
        run: |
          mkdir -p "$HOME/.cache/CPM"
          echo "CPM_SOURCE_CACHE=$HOME/.cache/CPM" >> $GITHUB_ENV

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            lld \
            pkg-config \
            cmake \
            ninja-build

      - name: Configure CMake
        run: |
          cmake -S . -B build/linux-x64 \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_TESTS=OFF \
                -DBUILD_DIAGNOSTIC=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -G Ninja

      - name: Build Linux binaries
        run: |
          cmake --build build/linux-x64 --parallel

      - name: Verify binaries
        run: |
          file build/linux-x64/bin/art2img | grep -q "ELF" && echo "Linux binary verified"
          file build/linux-x64/bin/art2img_diagnostic | grep -q "ELF" && echo "Linux diagnostic verified"

      - name: Create package
        run: |
          mkdir -p release/linux-x86_64

          cp build/linux-x64/bin/art2img release/linux-x86_64/art2img
          cp build/linux-x64/bin/art2img_diagnostic release/linux-x86_64/art2img_diagnostic
          cp README.md release/linux-x86_64/
          cp LICENSE release/linux-x86_64/ 2>/dev/null || echo "No LICENSE file found"

          cat > release/linux-x86_64/README.txt <<EOF
          art2img ${VERSION} - linux-x86_64

          Multi-threaded ART to image converter for Duke Nukem 3D assets.

          Binaries:
          - art2img - Main converter
          - art2img_diagnostic - Diagnostic tool

          Quick Start:
          ./art2img -f png -p PALETTE.DAT TILES000.ART

          See README.md for full documentation.
          EOF

          tar -czf art2img-linux-x86_64-${VERSION}.tar.gz -C release/linux-x86_64 .

          echo "Package created: art2img-linux-x86_64-${VERSION}.tar.gz"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: art2img-linux-x86_64
          path: art2img-linux-x86_64-${VERSION}.tar.gz
          retention-days: 30

  package-windows:
    name: Package Windows build
    runs-on: windows-latest
    needs: prepare
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache CPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-

      - name: Configure CPM cache directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "$HOME\AppData\Local\Temp\CPM" -Force | Out-Null
          "CPM_SOURCE_CACHE=$HOME\AppData\Local\Temp\CPM" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Configure CMake
        shell: pwsh
        run: |
          cmake -S . -B build/windows-x64 `
                -DCMAKE_BUILD_TYPE=Release `
                -DBUILD_TESTS=OFF `
                -DBUILD_DIAGNOSTIC=ON `
                -DBUILD_SHARED_LIBS=OFF `
                -A x64

      - name: Build Windows binaries
        shell: pwsh
        run: |
          cmake --build build/windows-x64 --config Release --parallel

      - name: Resolve Windows binary paths
        shell: pwsh
        run: |
          $cli = Get-ChildItem -Path build\windows-x64\bin -Recurse -Filter art2img.exe | Select-Object -First 1
          if (-not $cli) {
            Write-Host "art2img.exe not found in build\\windows-x64\\bin"
            exit 1
          }

          $diagnostic = Get-ChildItem -Path build\windows-x64\bin -Recurse -Filter art2img_diagnostic.exe | Select-Object -First 1
          if (-not $diagnostic) {
            Write-Host "art2img_diagnostic.exe not found in build\\windows-x64\\bin"
            exit 1
          }

          "CLI_BINARY=$($cli.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          "DIAGNOSTIC_BINARY=$($diagnostic.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Verify binaries
        shell: pwsh
        run: |
          if (Test-Path "$env:CLI_BINARY") {
            Write-Host "Windows CLI binary verified"
          } else {
            Write-Host "Windows CLI binary verification failed"
            exit 1
          }
          if (Test-Path "$env:DIAGNOSTIC_BINARY") {
            Write-Host "Windows diagnostic binary verified"
          } else {
            Write-Host "Windows diagnostic binary verification failed"
            exit 1
          }

      - name: Create package
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "release\windows-x64" -Force | Out-Null

          Copy-Item "$env:CLI_BINARY" -Destination "release\windows-x64\"
          Copy-Item "$env:DIAGNOSTIC_BINARY" -Destination "release\windows-x64\"
          Copy-Item "README.md" -Destination "release\windows-x64\"
          Copy-Item "LICENSE" -Destination "release\windows-x64\" -ErrorAction SilentlyContinue

          $content = @"
          art2img ${env:VERSION} - windows-x64

          Multi-threaded ART to image converter for Duke Nukem 3D assets.

          Binaries:
          - art2img.exe - Main converter
          - art2img_diagnostic.exe - Diagnostic tool

          Quick Start:
          .\art2img.exe -f png -p PALETTE.DAT TILES000.ART

          See README.md for full documentation.
          "@
          $content | Out-File -FilePath "release\windows-x64\README.txt" -Encoding UTF8

          Compress-Archive -Path "release\windows-x64\*" -DestinationPath "art2img-windows-x64-${env:VERSION}.zip"

          Write-Host "Package created: art2img-windows-x64-${env:VERSION}.zip"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: art2img-windows-x64
          path: art2img-windows-x64-${{ env.VERSION }}.zip
          retention-days: 30

  publish:
    name: Publish GitHub release
    runs-on: ubuntu-latest
    needs:
      - prepare
      - package-linux
      - package-windows
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Determine tag name
        run: |
          TAG_SOURCE="${GITHUB_REF_NAME:-${{ github.event.release.tag_name || '' }}}"
          if [ -z "$TAG_SOURCE" ]; then
            TAG_SOURCE="${VERSION}"
          fi
          echo "TAG_NAME=$TAG_SOURCE" >> $GITHUB_ENV

      - name: Generate release notes
        run: |
          cat > release-notes.md <<EOF
          # art2img ${TAG_NAME}

          Multi-threaded ART to image converter for Duke Nukem 3D assets with prebuilt packages for Linux and Windows.

          ## Downloads

          ### Linux
          - **x86_64**: \`art2img-linux-x86_64-${VERSION}.tar.gz\`

          ### Windows
          - **x86_64**: \`art2img-windows-x64-${VERSION}.zip\`

          ## Installation

          ### Linux
          \`\`\`bash
          tar -xzf art2img-linux-x86_64-${VERSION}.tar.gz
          ./art2img --help
          \`\`\`

          ### Windows
          \`\`\`powershell
          Expand-Archive art2img-windows-x64-${VERSION}.zip
          .\art2img.exe --help
          \`\`\`

          ## Features
          - Multi-threaded extraction
          - PNG and TGA output with alpha channel support
          - Animation data extraction
          - Cross-platform compatibility (Linux & Windows)
          - Static binaries (no dependencies required)

          ## Verification
          All binaries are statically built and verified during CI. No additional dependencies required.

          ---
          [Full Documentation](https://github.com/raulcorreia7/art2img)
          EOF

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          tag_name: ${{ env.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
