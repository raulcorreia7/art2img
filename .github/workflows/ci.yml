name: CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest
            arch: x64
          - os: windows-latest
            arch: Win32
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
        
    - name: Cache CPM dependencies
      uses: actions/cache@v4
      with:
        path: .cache
        key: ${{ runner.os }}-${{ matrix.arch || 'default' }}-cpm-${{ hashFiles('cmake/CPM.cmake', '**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch || 'default' }}-cpm-
          
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON ${{ matrix.arch && format('-A {0}', matrix.arch) || '' }}
        
    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      run: |
        if [ "${{ runner.os }}" = "macOS" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON
        else
          which ninja && cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -G Ninja || cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON
        fi
        
    - name: Build (Windows)
      if: runner.os == 'Windows'
      run: |
        cmake --build build --config Debug --parallel 4
        
    - name: Build (Unix)
      if: runner.os != 'Windows'
      run: |
        if [ "${{ runner.os }}" = "macOS" ]; then
          cmake --build build --config Debug --parallel 4
        else
          which ninja && cmake --build build --config Debug --parallel 4 || cmake --build build --config Debug --parallel 4
        fi
        
    - name: Build Verification
      if: always()
      shell: bash
      run: |
        cd build
        if [ "${{ runner.os }}" = "Windows" ]; then
          TEST_PATH=$(find . -name "art2img_tests.exe" -type f | head -1)
          if [ -z "$TEST_PATH" ]; then
            echo "No art2img_tests.exe found in build directory"
            find . -name "*.exe" -type f || echo "No executables found"
            exit 1
          fi
          echo "Test executable found at: $TEST_PATH"
        else
          TEST_PATH=$(find . -name "art2img_tests" -type f | head -1)
          if [ -z "$TEST_PATH" ]; then
            echo "No art2img_tests found in build directory"
            find . -name "art2img*" -type f -executable || echo "No executables found"
            exit 1
          fi
          echo "Test executable found at: $TEST_PATH"
        fi
        
    - name: Test
      if: always()
      shell: bash
      run: |
        cd build
        if [ "${{ runner.os }}" = "Windows" ]; then
          ctest --output-on-failure --parallel 1 --timeout 300
        elif [ "${{ runner.os }}" = "macOS" ]; then
          ctest --output-on-failure --parallel 1 --timeout 300
        else
          ctest --output-on-failure --parallel 1 --timeout 300
        fi
        
    - name: Test Status Check
      if: always()
      shell: bash
      run: |
        if [ "${{ job.status }}" = "failure" ]; then
          echo "Job failed on ${{ matrix.os }}"
          echo "Check the test logs above for specific failure details"
          exit 1
        elif [ "${{ job.status }}" = "success" ]; then
          echo "All tests passed on ${{ matrix.os }}"
        else
          echo "Job status: ${{ job.status }} on ${{ matrix.os }}"
          exit 1
        fi
        
    - name: Generate coverage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        if [ -f coverage.info ]; then
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info
        fi
        
    - name: Upload coverage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./build/coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
