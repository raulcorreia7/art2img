name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  # Linux build and test
  linux-build:
    name: Linux Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-linux-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-linux-

      - name: Setup build cache
        uses: actions/cache@v4
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-linux-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-linux-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            lld \
            pkg-config \
            cmake \
            ninja-build

      - name: Configure CMake
        run: |
          cmake -B build/linux-x64 \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_TESTS=ON \
                -DBUILD_DIAGNOSTIC=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -G Ninja

      - name: Build Linux binaries
        run: |
          cmake --build build/linux-x64 --parallel $(nproc)

      - name: Run tests
        run: |
          cd build/linux-x64 && ctest --output-on-failure

  # Windows native build and test
  windows-build:
    name: Windows Build and Test
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-windows-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-windows-

      - name: Setup build cache
        uses: actions/cache@v4
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-windows-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-windows-

      - name: Configure CMake for Windows
        shell: pwsh
        run: |
          cmake -B build/windows-x64 `
                -DCMAKE_BUILD_TYPE=Release `
                -DBUILD_TESTS=ON `
                -DBUILD_DIAGNOSTIC=ON `
                -DBUILD_SHARED_LIBS=OFF `
                -A x64

      - name: Build Windows binaries
        shell: pwsh
        run: |
          cmake --build build/windows-x64 --parallel

      - name: Run tests
        shell: pwsh
        run: |
          cd build/windows-x64
          ctest --output-on-failure

  # macOS build and test
  macos-build:
    name: macOS Build and Test
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-macos-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-macos-

      - name: Setup build cache
        uses: actions/cache@v4
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-macos-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-macos-

      - name: Install dependencies
        run: |
          brew install cmake ninja

      - name: Configure CMake
        run: |
          cmake -B build/macos-x64 \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_TESTS=ON \
                -DBUILD_DIAGNOSTIC=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -G Ninja

      - name: Build macOS binaries
        run: |
          cmake --build build/macos-x64 --parallel $(sysctl -n hw.ncpu)

      - name: Run tests
        run: |
          cd build/macos-x64 && ctest --output-on-failure