name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  # Linux build and test
  linux-build:
    name: Linux Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-linux-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-linux-

      - name: Setup build cache
        uses: actions/cache@v3
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-linux-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-linux-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            lld \
            pkg-config \
            cmake \
            ninja-build

      - name: Configure CMake
        run: |
          cmake -B build/linux \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_TESTS=ON \
                -DBUILD_DIAGNOSTIC=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -G Ninja

      - name: Build Linux binaries
        run: |
          cmake --build build/linux --parallel $(nproc)

      - name: Run tests
        run: |
          cd build/linux && ctest --output-on-failure

  # Windows x86 build and test
  windows-x86-build:
    name: Windows x86 Build and Test
    runs-on: windows-latest
    env:
      WINDOWS_X86_RELEASE_DIR: build/windows-x86
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-win32-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-win32-

      - name: Setup build cache
        uses: actions/cache@v3
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-win32-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-win32-

      - name: Setup MinGW-w64 for Windows x86 build
        uses: egor-tensin/setup-mingw@v2.2.0
        with:
          platform: x86

      - name: Configure CMake for Windows x86
        shell: bash
        run: |
          cmake -B build/windows-x86 \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/cmake/windows-x86-toolchain.cmake" \
                -DBUILD_TESTS=ON \
                -DBUILD_DIAGNOSTIC=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -G "MinGW Makefiles"

      - name: Build Windows x86 binaries
        shell: bash
        run: |
          cmake --build build/windows-x86 --parallel

      - name: Display artifacts
        shell: bash
        run: |
          find build/windows-x86 -name "*.exe" -type f

  # Windows x64 build and test
  windows-x64-build:
    name: Windows x64 Build and Test
    runs-on: windows-latest
    env:
      WINDOWS_RELEASE_DIR: build/windows-x64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-win64-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-win64-

      - name: Setup build cache
        uses: actions/cache@v3
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-win64-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-win64-

      - name: Setup MinGW-w64 for Windows x64 build
        uses: egor-tensin/setup-mingw@v2.2.0
        with:
          platform: x64

      - name: Configure CMake for Windows x64
        shell: bash
        run: |
          cmake -B build/windows-x64 \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/cmake/windows-toolchain.cmake" \
                -DBUILD_TESTS=ON \
                -DBUILD_DIAGNOSTIC=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -G "MinGW Makefiles"

      - name: Build Windows x64 binaries
        shell: bash
        run: |
          cmake --build build/windows-x64 --parallel

      - name: Display artifacts
        shell: bash
        run: |
          find build/windows-x64 -name "*.exe" -type f

  # macOS build and test
  macos-build:
    name: macOS Build and Test
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CPM dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/CPM
            ~/AppData/Local/Temp/CPM
          key: cpm-${{ runner.os }}-macos-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-macos-

      - name: Setup build cache
        uses: actions/cache@v3
        with:
          path: |
            build/**/CMakeCache.txt
            build/**/CMakeFiles/**
            build/**/cmake_install.cmake
          key: build-${{ runner.os }}-macos-${{ hashFiles('**/CMakeLists.txt', '**/src/**', '**/include/**', '**/cli/**') }}
          restore-keys: |
            build-${{ runner.os }}-macos-

      - name: Install dependencies
        run: |
          brew install cmake ninja

      - name: Configure CMake
        run: |
          cmake -B build/macos \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_TESTS=ON \
                -DBUILD_DIAGNOSTIC=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -G Ninja

      - name: Build macOS binaries
        run: |
          cmake --build build/macos --parallel $(sysctl -n hw.ncpu)

      - name: Run tests
        run: |
          cd build/macos && ctest --output-on-failure