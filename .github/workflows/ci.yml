name: CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest
            arch: x64
          - os: windows-latest
            arch: Win32
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake lcov ninja-build
        
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja
        
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake ninja
        
    - name: Cache CPM dependencies
      uses: actions/cache@v4
      with:
        path: .cache
        key: ${{ runner.os }}-cpm-${{ hashFiles('cmake/CPM.cmake', '**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cpm-
          
    - name: Configure CMake
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON ${{ matrix.arch && format('-A {0}', matrix.arch) || '' }}
        else
          which ninja && cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -G Ninja || cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON
        fi
        
    - name: Build
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          cmake --build build --config Debug --parallel
        else
          which ninja && cmake --build build --config Debug --parallel || cmake --build build --config Debug
        fi
        
    - name: Build Verification
      run: |
        cd build
        if [ "${{ runner.os }}" = "Windows" ]; then
          if (!(Test-Path "tests/art2img_tests.exe")) { exit 1 }
        else
          if [ ! -f "tests/art2img_tests" ]; then exit 1; fi
        fi
      shell: powershell
        
    - name: Test (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      continue-on-error: true
      run: |
        cd build
        ctest --output-on-failure --parallel 1 --timeout 300
        
    - name: Test (Unix)
      if: runner.os != 'Windows'
      continue-on-error: true
      run: |
        cd build
        if [ "${{ runner.os }}" = "macOS" ]; then
          ctest --output-on-failure --parallel $(sysctl -n hw.ncpu) --timeout 300
        else
          ctest --output-on-failure --parallel $(nproc) --timeout 300
        fi
        
    - name: Test Status Check
      if: always()
      run: |
        if [ "${{ job.status }}" = "failure" ]; then
          echo "Tests failed on ${{ matrix.os }}"
          echo "Check platform-specific test configuration"
          exit 1
        fi
        
    - name: Generate coverage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        if [ -f coverage.info ]; then
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info
        fi
        
    - name: Upload coverage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./build/coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false