name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build-test:
    name: ${{ matrix.display_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            display_name: Linux Build & Test
            shell: bash
            cache_path: |
              ~/.cache/CPM
            cpm_cache_dir: ~/.cache/CPM
            configure: |
              cmake -S . -B build/linux-x64 \
                    -DCMAKE_BUILD_TYPE=Release \
                    -DBUILD_TESTS=ON \
                    -DBUILD_DIAGNOSTIC=ON \
                    -DBUILD_SHARED_LIBS=OFF \
                    -G Ninja
            build: cmake --build build/linux-x64 --parallel
            test: |
              cd build/linux-x64
              ctest --output-on-failure
            install: |
              sudo apt-get update
              sudo apt-get install -y \
                build-essential \
                clang \
                lld \
                pkg-config \
                cmake \
                ninja-build
          - os: windows-latest
            display_name: Windows Build & Test
            shell: pwsh
            cache_path: |
              ~/.cache/CPM
              ~/AppData/Local/Temp/CPM
            cpm_cache_dir: ~/AppData/Local/Temp/CPM
            configure: |
              cmake -S . -B build/windows-x64 `
                    -DCMAKE_BUILD_TYPE=Release `
                    -DBUILD_TESTS=ON `
                    -DBUILD_DIAGNOSTIC=ON `
                    -DBUILD_SHARED_LIBS=OFF `
                    -A x64
            build: cmake --build build/windows-x64 --config Release --parallel
            test: |
              cd build/windows-x64
              ctest --output-on-failure -C Release
            install: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache CPM dependencies
        uses: actions/cache@v4
        with:
          path: ${{ matrix.cache_path }}
          key: cpm-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cpm-${{ runner.os }}-

      - name: Configure CPM cache directory
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p "${{ matrix.cpm_cache_dir }}"
          echo "CPM_SOURCE_CACHE=${{ matrix.cpm_cache_dir }}" >> $GITHUB_ENV

      - name: Configure CPM cache directory (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "${{ matrix.cpm_cache_dir }}" -Force | Out-Null
          "CPM_SOURCE_CACHE=${{ matrix.cpm_cache_dir }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install build dependencies
        if: matrix.install != ''
        shell: ${{ matrix.shell }}
        run: ${{ matrix.install }}

      - name: Configure CMake
        shell: ${{ matrix.shell }}
        run: ${{ matrix.configure }}

      - name: Build
        shell: ${{ matrix.shell }}
        run: ${{ matrix.build }}

      - name: Run tests
        shell: ${{ matrix.shell }}
        run: ${{ matrix.test }}
